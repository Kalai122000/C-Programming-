#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Stack {
    struct Node* top;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
void initializeStack(struct Stack* stack) {
    stack->top = NULL;
}

void push(struct Stack* stack, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = stack->top;
    stack->top = newNode;
}
int pop(struct Stack* stack) {
    if (stack->top == NULL) {
        printf("Stack is empty.\n");
        return -1;
    }
    struct Node* temp = stack->top;
    int poppedData = temp->data;
    stack->top = stack->top->next;
    free(temp);
    return poppedData;
}
int peek(struct Stack* stack) {
    if (stack->top == NULL) {
        printf("Stack is empty.\n");
        return -1;
    }
    return stack->top->data;
}

void display(struct Stack* stack) {
    struct Node* temp = stack->top;
    while (temp != NULL) {
        printf("%d --> ", temp->data);
        temp = temp->next;
    }
    printf("None\n");
}
int main() {
    struct Stack stack;
    initializeStack(&stack);

    int n, data;
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter element %d: ", i + 1);
        scanf("%d", &data);
        push(&stack, data);
    }
    display(&stack);

    int k;
    
    scanf("%d", &k);
    push(&stack, k);
    display(&stack);

    int poppedElement = pop(&stack);
    if (poppedElement != -1) {
        printf("\nPopped element: %d\n", poppedElement);
        display(&stack);
    }

    int peekedElement = peek(&stack);
    if (peekedElement != -1) {
        printf("\nPeeked element: %d\n", peekedElement);
    }
    return 0;
}
