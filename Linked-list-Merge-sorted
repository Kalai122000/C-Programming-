#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->data = data;
    new_node->next = NULL;
    return new_node;
}

void insertAtEnd(struct Node** head, int data) {
    struct Node* new_node = createNode(data);
    if (*head == NULL) {
        *head = new_node;
        return;
    }
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = new_node;
}

void printList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

struct Node* merge(struct Node* first, struct Node* second) {
    
    struct Node* result = NULL; 
    struct Node* tail = NULL;   

    if (first->data <= second->data) {
        result = first;
        first = first->next;
    } else {
        result = second;
        second = second->next;
    }
    tail = result;

    while (first != NULL && second!= NULL) {
        if (first->data <= second->data) {
            tail->next = first;
            first = first->next;
        } else {
            tail->next = second;
            second = second->next;
        }
        tail = tail->next;
    }
    if (first != NULL) {
        tail->next = first;
    } else {
        tail->next = second;
    }

    return result;
}

void freeList(struct Node* head) {
    struct Node* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    struct Node* first = NULL;
    struct Node* second = NULL;
    int n ;
    scanf("%d",&n);
    
    for(int i =0;i<n;i++){
      int k ;
      scanf("%d",&k);
      insertAtEnd(&first,k);
    }
    int m;
    scanf("%d",&m);
    for(int i =0;i<m;i++){
      int T;
      scanf("%d",&T);
      insertAtEnd(&second,T);
    }
    
    struct Node* final = merge(first, second);
    
    printList(final);

    

    return 0;
}
